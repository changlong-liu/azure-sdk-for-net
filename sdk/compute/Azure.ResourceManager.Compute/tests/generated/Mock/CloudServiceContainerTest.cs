// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for CloudService. </summary>
    public partial class CloudServiceContainerMockTests : MockTestBase
    {
        public CloudServiceContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<CloudServiceContainer> GetCloudServiceContainerAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            CloudServiceContainer cloudServiceContainer = resourceGroup.GetCloudServices();
            return cloudServiceContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create New Cloud Service with Multiple Roles
            var container = await GetCloudServiceContainerAsync("ConstosoRG");
            var cloudServiceName = "{cs-name}";
            var parameters = new CloudServiceData("westus")
            {
                Properties = new CloudServiceProperties()
                {
                    PackageUrl = "{PackageUrl}",
                    Configuration = "{ServiceConfiguration}",
                    UpgradeMode = new Compute.Models.CloudServiceUpgradeMode("Auto"),
                    RoleProfile = new CloudServiceRoleProfile(),
                    NetworkProfile = new CloudServiceNetworkProfile(),
                },
            };

            await container.CreateOrUpdateAsync(cloudServiceName, parameters);
        }
    }
}
