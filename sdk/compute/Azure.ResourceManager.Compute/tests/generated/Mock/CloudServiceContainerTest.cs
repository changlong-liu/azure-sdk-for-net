// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests
{
    /// <summary> Test for CloudService. </summary>
    public partial class CloudServiceContainerMockTests : ComputeTestBase
    {
        public CloudServiceContainerMockTests(bool isAsync) : base(isAsync)
        {
        }

        private async Task<CloudServiceContainer> GetCloudServiceContainerAsync()
        {
            var resourceGroup = await CreateResourceGroupAsync();
            return resourceGroup.GetCloudServices();
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            var container = await GetCloudServiceContainerAsync();
            // Example: Create New Cloud Service with Multiple Roles
            var cloudServiceName = "{cs-name}";
            var parameters = new CloudServiceData("westus")
            {
                Properties = new CloudServiceProperties()
                {
                    PackageUrl = "{PackageUrl}",
                    Configuration = "{ServiceConfiguration}",
                    UpgradeMode = new Compute.Models.CloudServiceUpgradeMode("Auto"),
                    RoleProfile = new CloudServiceRoleProfile(),
                    NetworkProfile = new CloudServiceNetworkProfile(),
                },
            };

            container.CreateOrUpdate(cloudServiceName, parameters);
        }
        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            var container = await GetCloudServiceContainerAsync();
            // Example: Create New Cloud Service with Multiple Roles
            var cloudServiceName = "{cs-name}";
            var parameters = new CloudServiceData("westus")
            {
                Properties = new CloudServiceProperties()
                {
                    PackageUrl = "{PackageUrl}",
                    Configuration = "{ServiceConfiguration}",
                    UpgradeMode = new Compute.Models.CloudServiceUpgradeMode("Auto"),
                    RoleProfile = new CloudServiceRoleProfile(),
                    NetworkProfile = new CloudServiceNetworkProfile(),
                },
            };

            await container.CreateOrUpdateAsync(cloudServiceName, parameters);
        }
    }
}
