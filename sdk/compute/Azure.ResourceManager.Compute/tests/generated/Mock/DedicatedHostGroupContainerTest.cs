// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests
{
    /// <summary> Test for DedicatedHostGroup. </summary>
    public partial class DedicatedHostGroupContainerMockTests : ComputeTestBase
    {
        public DedicatedHostGroupContainerMockTests(bool isAsync) : base(isAsync)
        {
        }

        private async Task<DedicatedHostGroupContainer> GetDedicatedHostGroupContainerAsync()
        {
            var resourceGroup = await CreateResourceGroupAsync();
            return resourceGroup.GetDedicatedHostGroups();
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            var container = await GetDedicatedHostGroupContainerAsync();
            // Example: Create or update a dedicated host group.
            var hostGroupName = "myDedicatedHostGroup";

            var parameters = new DedicatedHostGroupData("westus")
            {
                PlatformFaultDomainCount = 3,
                SupportAutomaticPlacement = true,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>()
{
{
"department","finance"}
,});

            container.CreateOrUpdate(hostGroupName, parameters);
        }
        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            var container = await GetDedicatedHostGroupContainerAsync();
            // Example: Create or update a dedicated host group.
            var hostGroupName = "myDedicatedHostGroup";

            var parameters = new DedicatedHostGroupData("westus")
            {
                PlatformFaultDomainCount = 3,
                SupportAutomaticPlacement = true,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>()
{
{
"department","finance"}
,});

            await container.CreateOrUpdateAsync(hostGroupName, parameters);
        }
    }
}
