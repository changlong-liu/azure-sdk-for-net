// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for VirtualMachineRunCommandVirtualMachine. </summary>
    public partial class VirtualMachineRunCommandVirtualMachineContainerMockTests : MockTestBase
    {
        public VirtualMachineRunCommandVirtualMachineContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<VirtualMachineRunCommandVirtualMachineContainer> GetVirtualMachineRunCommandVirtualMachineContainerAsync(string resourceGroupName, string vmName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            VirtualMachineContainer virtualMachineContainer = resourceGroup.GetVirtualMachines();
            VirtualMachine virtualMachine = await TestHelper.CreateOrUpdateExampleInstanceAsync(virtualMachineContainer, vmName);
            VirtualMachineRunCommandVirtualMachineContainer virtualMachineRunCommandVirtualMachineContainer = virtualMachine.GetVirtualMachineRunCommandVirtualMachines();
            return virtualMachineRunCommandVirtualMachineContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create or update a run command.
            var container = await GetVirtualMachineRunCommandVirtualMachineContainerAsync("myResourceGroup", "myVM");
            var runCommandName = "myRunCommand";
            var runCommand = new VirtualMachineRunCommandData("West US")
            {
                Source = new VirtualMachineRunCommandScriptSource()
                {
                    Script = "Write-Host Hello World!",
                },
                AsyncExecution = false,
                RunAsUser = "user1",
                RunAsPassword = "<runAsPassword>",
                TimeoutInSeconds = 3600,
            };

            await container.CreateOrUpdateAsync(runCommandName, runCommand);
        }
    }
}
