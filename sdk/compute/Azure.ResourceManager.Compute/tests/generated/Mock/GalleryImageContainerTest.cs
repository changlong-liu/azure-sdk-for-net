// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for GalleryImage. </summary>
    public partial class GalleryImageContainerMockTests : MockTestBase
    {
        public GalleryImageContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<GalleryImageContainer> GetGalleryImageContainerAsync(string resourceGroupName, string galleryName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            GalleryContainer galleryContainer = resourceGroup.GetGalleries();
            Gallery gallery = await TestHelper.CreateOrUpdateExampleInstanceAsync(galleryContainer, galleryName);
            GalleryImageContainer galleryImageContainer = gallery.GetGalleryImages();
            return galleryImageContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create or update a simple gallery image.
            var container = await GetGalleryImageContainerAsync("myResourceGroup", "myGalleryName");
            var galleryImageName = "myGalleryImageName";
            var galleryImage = new GalleryImageData("West US")
            {
                OsType = "Windows".ToOperatingSystemTypes(),
                OsState = "Generalized".ToOperatingSystemStateTypes(),
                HyperVGeneration = new Compute.Models.HyperVGeneration("V1"),
                Identifier = new GalleryImageIdentifier("myPublisherName", "myOfferName", "mySkuName"),
            };

            await container.CreateOrUpdateAsync(galleryImageName, galleryImage);
        }
    }
}
