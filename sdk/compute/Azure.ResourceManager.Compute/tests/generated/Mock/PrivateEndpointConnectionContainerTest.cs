// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionContainerMockTests : MockTestBase
    {
        public PrivateEndpointConnectionContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<PrivateEndpointConnectionContainer> GetPrivateEndpointConnectionContainerAsync(string resourceGroupName, string diskAccessName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            DiskAccessContainer diskAccessContainer = resourceGroup.GetDiskAccesses();
            DiskAccess diskAccess = await TestHelper.CreateOrUpdateExampleInstanceAsync(diskAccessContainer, diskAccessName);
            PrivateEndpointConnectionContainer privateEndpointConnectionContainer = diskAccess.GetPrivateEndpointConnections();
            return privateEndpointConnectionContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Approve a Private Endpoint Connection under a disk access resource.
            var container = await GetPrivateEndpointConnectionContainerAsync("myResourceGroup", "myDiskAccess");
            var privateEndpointConnectionName = "myPrivateEndpointConnection";
            var privateEndpointConnection = new PrivateEndpointConnectionData()
            {
                PrivateLinkServiceConnectionState = new PrivateLinkServiceConnectionState()
                {
                    Status = new Compute.Models.PrivateEndpointServiceConnectionStatus("Approved"),
                    Description = "Approving myPrivateEndpointConnection",
                },
            };

            await container.CreateOrUpdateAsync(privateEndpointConnectionName, privateEndpointConnection);
        }
    }
}
