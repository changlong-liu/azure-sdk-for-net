// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests
{
    /// <summary> Test for ProximityPlacementGroup. </summary>
    public partial class ProximityPlacementGroupContainerMockTests : ComputeTestBase
    {
        public ProximityPlacementGroupContainerMockTests(bool isAsync) : base(isAsync)
        {
        }

        private async Task<ProximityPlacementGroupContainer> GetProximityPlacementGroupContainerAsync()
        {
            var resourceGroup = await CreateResourceGroupAsync();
            return resourceGroup.GetProximityPlacementGroups();
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            var container = await GetProximityPlacementGroupContainerAsync();
            // Example: Create or Update a proximity placement group.
            var proximityPlacementGroupName = "myProximityPlacementGroup";
            var parameters = new ProximityPlacementGroupData("westus")
            {
                ProximityPlacementGroupType = new Compute.Models.ProximityPlacementGroupType("Standard"),
            };

            container.CreateOrUpdate(proximityPlacementGroupName, parameters);
        }
        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            var container = await GetProximityPlacementGroupContainerAsync();
            // Example: Create or Update a proximity placement group.
            var proximityPlacementGroupName = "myProximityPlacementGroup";
            var parameters = new ProximityPlacementGroupData("westus")
            {
                ProximityPlacementGroupType = new Compute.Models.ProximityPlacementGroupType("Standard"),
            };

            await container.CreateOrUpdateAsync(proximityPlacementGroupName, parameters);
        }
    }
}
