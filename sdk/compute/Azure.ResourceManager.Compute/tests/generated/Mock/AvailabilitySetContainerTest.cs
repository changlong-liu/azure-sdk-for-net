// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Compute.Tests
{
    /// <summary> Test for AvailabilitySet. </summary>
    public partial class AvailabilitySetContainerMockTests : MockTestBase
    {
        public AvailabilitySetContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            System.Net.ServicePointManager.ServerCertificateValidationCallback +=
    delegate (object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                            System.Security.Cryptography.X509Certificates.X509Chain chain,
                            System.Net.Security.SslPolicyErrors sslPolicyErrors)
    {
        return true; // **** Always accept
    };
        }

        [SetUp]
        public void CreateCommonClient()
        {
            Client = GetArmClient();
        }

        ArmClient Client;
        protected Subscription DefaultSubscription => Client.DefaultSubscription;
        protected Location DefaultLocation => Location.WestUS2;
        protected async Task<ResourceGroup> CreateResourceGroupAsync()
        {
            var resourceGroupName = "testRG-";
            return await DefaultSubscription.GetResourceGroups().CreateOrUpdateAsync(
                resourceGroupName,
                new ResourceGroupData(DefaultLocation)
                {
                    Tags =
                    {
                        { "test", "env" }
                    }
                });
        }

        private async Task<AvailabilitySetContainer> GetAvailabilitySetContainerAsync()
        {
            var resourceGroup = await CreateResourceGroupAsync();
            return resourceGroup.GetAvailabilitySets();
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            var container = await GetAvailabilitySetContainerAsync();
            // Example: Create an availability set.
            var availabilitySetName = "myAvailabilitySet";

            var parameters = new AvailabilitySetData("westus")
            {
                PlatformUpdateDomainCount = 20,
                PlatformFaultDomainCount = 2,
            };

            await container.CreateOrUpdateAsync(availabilitySetName, parameters);
        }
    }
}
