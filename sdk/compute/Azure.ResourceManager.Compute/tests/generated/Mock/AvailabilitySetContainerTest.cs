// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for AvailabilitySet. </summary>
    public partial class AvailabilitySetContainerMockTests : MockTestBase
    {
        public AvailabilitySetContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<AvailabilitySetContainer> GetAvailabilitySetContainerAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            AvailabilitySetContainer availabilitySetContainer = resourceGroup.GetAvailabilitySets();
            return availabilitySetContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create an availability set.
            var container = await GetAvailabilitySetContainerAsync("myResourceGroup");
            var availabilitySetName = "myAvailabilitySet";
            var parameters = new AvailabilitySetData("westus")
            {
                PlatformUpdateDomainCount = 20,
                PlatformFaultDomainCount = 2,
            };

            await container.CreateOrUpdateAsync(availabilitySetName, parameters);
        }
    }
}
