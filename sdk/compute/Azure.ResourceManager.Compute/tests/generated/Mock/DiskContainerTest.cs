// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests
{
    /// <summary> Test for Disk. </summary>
    public partial class DiskContainerMockTests : ComputeTestBase
    {
        public DiskContainerMockTests(bool isAsync) : base(isAsync)
        {
        }

        private async Task<DiskContainer> GetDiskContainerAsync()
        {
            var resourceGroup = await CreateResourceGroupAsync();
            return resourceGroup.GetDisks();
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            var container = await GetDiskContainerAsync();
            // Example: Create a managed disk and associate with disk access resource.
            var diskName = "myDisk";
            var disk = new DiskData("West US")
            {
                CreationData = new CreationData(new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
                NetworkAccessPolicy = new Compute.Models.NetworkAccessPolicy("AllowPrivate"),
                DiskAccessId = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}",
            };

            container.CreateOrUpdate(diskName, disk);
        }
        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            var container = await GetDiskContainerAsync();
            // Example: Create a managed disk and associate with disk access resource.
            var diskName = "myDisk";
            var disk = new DiskData("West US")
            {
                CreationData = new CreationData(new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
                NetworkAccessPolicy = new Compute.Models.NetworkAccessPolicy("AllowPrivate"),
                DiskAccessId = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}",
            };

            await container.CreateOrUpdateAsync(diskName, disk);
        }
    }
}
