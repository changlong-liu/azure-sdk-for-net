// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Disk. </summary>
    public partial class DiskContainerMockTests : MockTestBase
    {
        public DiskContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<DiskContainer> GetDiskContainerAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            DiskContainer diskContainer = resourceGroup.GetDisks();
            return diskContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a managed disk and associate with disk access resource.
            var container = await GetDiskContainerAsync("myResourceGroup");
            var diskName = "myDisk";
            var disk = new DiskData("West US")
            {
                CreationData = new CreationData(new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
                NetworkAccessPolicy = new Compute.Models.NetworkAccessPolicy("AllowPrivate"),
                DiskAccessId = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}",
            };

            await container.CreateOrUpdateAsync(diskName, disk);
        }
    }
}
