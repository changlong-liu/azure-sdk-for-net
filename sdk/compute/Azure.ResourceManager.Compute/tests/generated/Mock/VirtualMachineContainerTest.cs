// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests
{
    /// <summary> Test for VirtualMachine. </summary>
    public partial class VirtualMachineContainerMockTests : ComputeTestBase
    {
        public VirtualMachineContainerMockTests(bool isAsync) : base(isAsync)
        {
        }

        private async Task<VirtualMachineContainer> GetVirtualMachineContainerAsync()
        {
            var resourceGroup = await CreateResourceGroupAsync();
            return resourceGroup.GetVirtualMachines();
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdate()
        {
            var container = await GetVirtualMachineContainerAsync();
            // Example: Create a Linux vm with a patch setting assessmentMode of ImageDefault.
            var vmName = "myVM";

            var parameters = new VirtualMachineData("westus")
            {
                HardwareProfile = new HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D2s_v3"),
                },
                StorageProfile = new StorageProfile()
                {
                    ImageReference = new ImageReference()
                    {
                        Publisher = "Canonical",
                        Offer = "UbuntuServer",
                        Sku = "16.04-LTS",
                        Version = "latest",
                    },
                    OsDisk = new OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = "ReadWrite".ToCachingTypes(),
                        ManagedDisk = new ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    LinuxConfiguration = new LinuxConfiguration()
                    {
                        ProvisionVMAgent = true,
                        PatchSettings = new LinuxPatchSettings()
                        {
                            AssessmentMode = new Compute.Models.LinuxPatchAssessmentMode("ImageDefault"),
                        },
                    },
                },
                NetworkProfile = new NetworkProfile(),
            };

            container.CreateOrUpdate(vmName, parameters);
        }
        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            var container = await GetVirtualMachineContainerAsync();
            // Example: Create a Linux vm with a patch setting assessmentMode of ImageDefault.
            var vmName = "myVM";

            var parameters = new VirtualMachineData("westus")
            {
                HardwareProfile = new HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D2s_v3"),
                },
                StorageProfile = new StorageProfile()
                {
                    ImageReference = new ImageReference()
                    {
                        Publisher = "Canonical",
                        Offer = "UbuntuServer",
                        Sku = "16.04-LTS",
                        Version = "latest",
                    },
                    OsDisk = new OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = "ReadWrite".ToCachingTypes(),
                        ManagedDisk = new ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    LinuxConfiguration = new LinuxConfiguration()
                    {
                        ProvisionVMAgent = true,
                        PatchSettings = new LinuxPatchSettings()
                        {
                            AssessmentMode = new Compute.Models.LinuxPatchAssessmentMode("ImageDefault"),
                        },
                    },
                },
                NetworkProfile = new NetworkProfile(),
            };

            await container.CreateOrUpdateAsync(vmName, parameters);
        }
    }
}
