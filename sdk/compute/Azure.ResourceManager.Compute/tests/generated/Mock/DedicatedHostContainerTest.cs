// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for DedicatedHost. </summary>
    public partial class DedicatedHostContainerMockTests : MockTestBase
    {
        public DedicatedHostContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<DedicatedHostContainer> GetDedicatedHostContainerAsync(string resourceGroupName, string hostGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            DedicatedHostGroupContainer dedicatedHostGroupContainer = resourceGroup.GetDedicatedHostGroups();
            DedicatedHostGroup dedicatedHostGroup = await TestHelper.CreateOrUpdateExampleInstanceAsync(dedicatedHostGroupContainer, hostGroupName);
            DedicatedHostContainer dedicatedHostContainer = dedicatedHostGroup.GetDedicatedHosts();
            return dedicatedHostContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create or update a dedicated host .
            var container = await GetDedicatedHostContainerAsync("myResourceGroup", "myDedicatedHostGroup");
            var hostName = "myDedicatedHost";
            var parameters = new DedicatedHostData("westus", new Sku()
            {
                Name = "DSv3-Type1",
            })
            {
                PlatformFaultDomain = 1,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { { "department", "HR" }, });
            await container.CreateOrUpdateAsync(hostName, parameters);
        }
    }
}
