// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for RestorePointCollection. </summary>
    public partial class RestorePointCollectionContainerMockTests : MockTestBase
    {
        public RestorePointCollectionContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<RestorePointCollectionContainer> GetRestorePointCollectionContainerAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            RestorePointCollectionContainer restorePointCollectionContainer = resourceGroup.GetRestorePointCollections();
            return restorePointCollectionContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create or update a restore point collection.
            var container = await GetRestorePointCollectionContainerAsync("myResourceGroup");
            var restorePointCollectionName = "myRpc";
            var parameters = new RestorePointCollectionData("norwayeast")
            {
                Source = new RestorePointCollectionSourceProperties()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
                },
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { { "myTag1", "tagValue1" }, });
            await container.CreateOrUpdateAsync(restorePointCollectionName, parameters);
        }
    }
}
