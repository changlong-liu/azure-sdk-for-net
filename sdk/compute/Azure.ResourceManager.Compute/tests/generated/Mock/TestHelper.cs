// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests
{
    /// <summary> Test Extension for Azure.ResourceManager.Compute. </summary>
    public static partial class TestHelper
    {
        public static async Task<AvailabilitySet> CreateOrUpdateExampleInstanceAsync(AvailabilitySetContainer container, string availabilitySetName)
        {
            // Example: Create an availability set.
            var parameters = new AvailabilitySetData("westus")
            {
                PlatformUpdateDomainCount = 20,
                PlatformFaultDomainCount = 2,
            };

            return await container.CreateOrUpdateAsync(availabilitySetName, parameters);
        }

        public static async Task<ProximityPlacementGroup> CreateOrUpdateExampleInstanceAsync(ProximityPlacementGroupContainer container, string proximityPlacementGroupName)
        {
            // Example: Create or Update a proximity placement group.
            var parameters = new ProximityPlacementGroupData("westus")
            {
                ProximityPlacementGroupType = new Compute.Models.ProximityPlacementGroupType("Standard"),
            };

            return await container.CreateOrUpdateAsync(proximityPlacementGroupName, parameters);
        }

        public static async Task<ProximityPlacementGroup> GetExampleInstanceAsync(ProximityPlacementGroupContainer container, string proximityPlacementGroupName)
        {
            // Example: Create a proximity placement group.
            string includeColocationStatus = null;

            return await container.GetAsync(proximityPlacementGroupName, includeColocationStatus);
        }

        public static async Task<DedicatedHostGroup> CreateOrUpdateExampleInstanceAsync(DedicatedHostGroupContainer container, string hostGroupName)
        {
            // Example: Create or update a dedicated host group.
            var parameters = new DedicatedHostGroupData("westus")
            {
                PlatformFaultDomainCount = 3,
                SupportAutomaticPlacement = true,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { { "department", "finance" }, });
            return await container.CreateOrUpdateAsync(hostGroupName, parameters);
        }

        public static async Task<DedicatedHostGroup> GetExampleInstanceAsync(DedicatedHostGroupContainer container, string hostGroupName)
        {
            // Example: Create a dedicated host group.
            InstanceViewTypes? expand = null;

            return await container.GetAsync(hostGroupName, expand);
        }

        public static async Task<DedicatedHost> CreateOrUpdateExampleInstanceAsync(DedicatedHostContainer container, string hostName)
        {
            // Example: Create or update a dedicated host .
            var parameters = new DedicatedHostData("westus", new Sku()
            {
                Name = "DSv3-Type1",
            })
            {
                PlatformFaultDomain = 1,
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { { "department", "HR" }, });
            return await container.CreateOrUpdateAsync(hostName, parameters);
        }

        public static async Task<DedicatedHost> GetExampleInstanceAsync(DedicatedHostContainer container, string hostName)
        {
            // Example: Get a dedicated host.
            InstanceViewTypes? expand = null;

            return await container.GetAsync(hostName, expand);
        }

        public static async Task<SshPublicKey> CreateExampleInstanceAsync(SshPublicKeyContainer container, string sshPublicKeyName)
        {
            // Example: Create a new SSH public key resource.
            var parameters = new SshPublicKeyData("westus")
            {
                PublicKey = "{ssh-rsa public key}",
            };

            return await container.CreateOrUpdateAsync(sshPublicKeyName, parameters);
        }

        public static async Task<SshPublicKey> GetExampleInstanceAsync(SshPublicKeyContainer container, string sshPublicKeyName)
        {
            // Example: Get an ssh public key.

            return await container.GetAsync(sshPublicKeyName);
        }

        public static async Task<VirtualMachine> CreateOrUpdateExampleInstanceAsync(VirtualMachineContainer container, string vmName)
        {
            // Example: Create a Linux vm with a patch setting assessmentMode of ImageDefault.
            var parameters = new VirtualMachineData("westus")
            {
                HardwareProfile = new HardwareProfile()
                {
                    VmSize = new Compute.Models.VirtualMachineSizeTypes("Standard_D2s_v3"),
                },
                StorageProfile = new StorageProfile()
                {
                    ImageReference = new ImageReference()
                    {
                        Publisher = "Canonical",
                        Offer = "UbuntuServer",
                        Sku = "16.04-LTS",
                        Version = "latest",
                    },
                    OsDisk = new OSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                    {
                        Name = "myVMosdisk",
                        Caching = "ReadWrite".ToCachingTypes(),
                        ManagedDisk = new ManagedDiskParameters()
                        {
                            StorageAccountType = new Compute.Models.StorageAccountTypes("Premium_LRS"),
                        },
                    },
                },
                OsProfile = new OSProfile()
                {
                    ComputerName = "myVM",
                    AdminUsername = "{your-username}",
                    AdminPassword = "{your-password}",
                    LinuxConfiguration = new LinuxConfiguration()
                    {
                        ProvisionVMAgent = true,
                        PatchSettings = new LinuxPatchSettings()
                        {
                            AssessmentMode = new Compute.Models.LinuxPatchAssessmentMode("ImageDefault"),
                        },
                    },
                },
                NetworkProfile = new NetworkProfile(),
            };

            return await container.CreateOrUpdateAsync(vmName, parameters);
        }

        public static async Task<VirtualMachine> GetExampleInstanceAsync(VirtualMachineContainer container, string vmName)
        {
            // Example: Get a Virtual Machine.
            InstanceViewTypes? expand = null;

            return await container.GetAsync(vmName, expand);
        }

        public static async Task<VirtualMachineScaleSet> CreateOrUpdateExampleInstanceAsync(VirtualMachineScaleSetContainer container, string vmScaleSetName)
        {
            // Example: Create a custom-image scale set from an unmanaged generalized os image.
            var parameters = new VirtualMachineScaleSetData("westus")
            {
                Sku = new Sku()
                {
                    Name = "Standard_D1_v2",
                    Tier = "Standard",
                    Capacity = 3,
                },
                UpgradePolicy = new UpgradePolicy()
                {
                    Mode = "Manual".ToUpgradeMode(),
                },
                VirtualMachineProfile = new VirtualMachineScaleSetVMProfile()
                {
                    OsProfile = new VirtualMachineScaleSetOSProfile()
                    {
                        ComputerNamePrefix = "{vmss-name}",
                        AdminUsername = "{your-username}",
                        AdminPassword = "{your-password}",
                    },
                    StorageProfile = new VirtualMachineScaleSetStorageProfile()
                    {
                        OsDisk = new VirtualMachineScaleSetOSDisk(new Compute.Models.DiskCreateOptionTypes("FromImage"))
                        {
                            Name = "osDisk",
                            Caching = "ReadWrite".ToCachingTypes(),
                            Image = new VirtualHardDisk()
                            {
                                Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd",
                            },
                        },
                    },
                    NetworkProfile = new VirtualMachineScaleSetNetworkProfile(),
                },
                Overprovision = true,
            };

            return await container.CreateOrUpdateAsync(vmScaleSetName, parameters);
        }

        public static async Task<VirtualMachineScaleSet> GetExampleInstanceAsync(VirtualMachineScaleSetContainer container, string vmScaleSetName)
        {
            // Example: Get a virtual machine scale set placed on a dedicated host group through automatic placement.
            ExpandTypesForGetVMScaleSets? expand = null;

            return await container.GetAsync(vmScaleSetName, expand);
        }

        public static async Task<Image> CreateOrUpdateExampleInstanceAsync(ImageContainer container, string imageName)
        {
            // Example: Create a virtual machine image from a blob with DiskEncryptionSet resource.
            var parameters = new ImageData("West US")
            {
                StorageProfile = new ImageStorageProfile()
                {
                    OsDisk = new ImageOSDisk("Linux".ToOperatingSystemTypes(), "Generalized".ToOperatingSystemStateTypes())
                    {
                        BlobUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                        DiskEncryptionSet = new DiskEncryptionSetParameters()
                        {
                            Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{{existing-diskEncryptionSet-name}}"),
                        },
                    },
                },
            };

            return await container.CreateOrUpdateAsync(imageName, parameters);
        }

        public static async Task<Image> GetExampleInstanceAsync(ImageContainer container, string imageName)
        {
            // Example: Get information about a virtual machine image.
            string expand = null;

            return await container.GetAsync(imageName, expand);
        }

        public static async Task<RestorePointCollection> CreateOrUpdateExampleInstanceAsync(RestorePointCollectionContainer container, string restorePointCollectionName)
        {
            // Example: Create or update a restore point collection.
            var parameters = new RestorePointCollectionData("norwayeast")
            {
                Source = new RestorePointCollectionSourceProperties()
                {
                    Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/virtualMachines/myVM"),
                },
            };
            parameters.Tags.ReplaceWith(new System.Collections.Generic.Dictionary<string, string>() { { "myTag1", "tagValue1" }, });
            return await container.CreateOrUpdateAsync(restorePointCollectionName, parameters);
        }

        public static async Task<RestorePointCollection> GetExampleInstanceAsync(RestorePointCollectionContainer container, string restorePointCollectionName)
        {
            // Example: Get a restore point collection (but not the restore points contained in the restore point collection)
            RestorePointCollectionExpandOptions? expand = null;

            return await container.GetAsync(restorePointCollectionName, expand);
        }

        public static async Task<RestorePoint> CreateExampleInstanceAsync(RestorePointContainer container, string restorePointName)
        {
            // Example: Create a restore point
            var parameters = new RestorePointData();

            return await container.CreateOrUpdateAsync(restorePointName, parameters);
        }

        public static async Task<RestorePoint> GetExampleInstanceAsync(RestorePointContainer container, string restorePointName)
        {
            // Example: Get a restore point

            return await container.GetAsync(restorePointName);
        }

        public static async Task<VirtualMachineScaleSetVMExtensionVirtualMachineScaleSet> CreateOrUpdateExampleInstanceAsync(VirtualMachineScaleSetVMExtensionVirtualMachineScaleSetContainer container, string vmExtensionName)
        {
            // Example: Create VirtualMachineScaleSet VM extension.
            var extensionParameters = new VirtualMachineScaleSetVMExtensionData()
            {
                Publisher = "extPublisher",
                TypePropertiesType = "extType",
                TypeHandlerVersion = "1.2",
                AutoUpgradeMinorVersion = true,
                Settings = JsonSerializer.Deserialize<object>("{\"UserName\":\"xyz@microsoft.com\"}"),
            };

            return await container.CreateOrUpdateAsync(vmExtensionName, extensionParameters);
        }

        public static async Task<VirtualMachineScaleSetVMExtensionVirtualMachineScaleSet> GetExampleInstanceAsync(VirtualMachineScaleSetVMExtensionVirtualMachineScaleSetContainer container, string vmExtensionName)
        {
            // Example: Get VirtualMachineScaleSet VM extension.
            string expand = null;

            return await container.GetAsync(vmExtensionName, expand);
        }

        public static async Task<VirtualMachineScaleSetVM> GetExampleInstanceAsync(VirtualMachineScaleSetVMContainer container, string instanceId)
        {
            // Example: Get VM scale set VM with UserData
            InstanceViewTypes? expand = null;

            return await container.GetAsync(instanceId, expand);
        }

        public static async Task<VirtualMachineRunCommandVirtualMachine> CreateOrUpdateExampleInstanceAsync(VirtualMachineRunCommandVirtualMachineContainer container, string runCommandName)
        {
            // Example: Create or update a run command.
            var runCommand = new VirtualMachineRunCommandData("West US")
            {
                Source = new VirtualMachineRunCommandScriptSource()
                {
                    Script = "Write-Host Hello World!",
                },
                AsyncExecution = false,
                RunAsUser = "user1",
                RunAsPassword = "<runAsPassword>",
                TimeoutInSeconds = 3600,
            };

            return await container.CreateOrUpdateAsync(runCommandName, runCommand);
        }

        public static async Task<VirtualMachineRunCommandVirtualMachine> GetByVirtualMachineExampleInstanceAsync(VirtualMachineRunCommandVirtualMachineContainer container, string runCommandName)
        {
            // Example: Get a run command.
            string expand = null;

            return await container.GetAsync(runCommandName, expand);
        }

        public static async Task<VirtualMachineRunCommandVirtualMachineScaleSetVM> CreateOrUpdateExampleInstanceAsync(VirtualMachineRunCommandVirtualMachineScaleSetVMContainer container, string runCommandName)
        {
            // Example: Create VirtualMachineScaleSet VM run command.
            var runCommand = new VirtualMachineRunCommandData("West US")
            {
                Source = new VirtualMachineRunCommandScriptSource()
                {
                    Script = "Write-Host Hello World!",
                },
                AsyncExecution = false,
                RunAsUser = "user1",
                RunAsPassword = "<runAsPassword>",
                TimeoutInSeconds = 3600,
            };

            return await container.CreateOrUpdateAsync(runCommandName, runCommand);
        }

        public static async Task<VirtualMachineRunCommandVirtualMachineScaleSetVM> GetExampleInstanceAsync(VirtualMachineRunCommandVirtualMachineScaleSetVMContainer container, string runCommandName)
        {
            // Example: Get VirtualMachineScaleSet VM run commands.
            string expand = null;

            return await container.GetAsync(runCommandName, expand);
        }

        public static async Task<Disk> CreateOrUpdateExampleInstanceAsync(DiskContainer container, string diskName)
        {
            // Example: Create a managed disk and associate with disk access resource.
            var disk = new DiskData("West US")
            {
                CreationData = new CreationData(new Compute.Models.DiskCreateOption("Empty")),
                DiskSizeGB = 200,
                NetworkAccessPolicy = new Compute.Models.NetworkAccessPolicy("AllowPrivate"),
                DiskAccessId = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskAccesses/{existing-diskAccess-name}",
            };

            return await container.CreateOrUpdateAsync(diskName, disk);
        }

        public static async Task<Disk> GetExampleInstanceAsync(DiskContainer container, string diskName)
        {
            // Example: Get information about a managed disk.

            return await container.GetAsync(diskName);
        }

        public static async Task<Snapshot> CreateOrUpdateExampleInstanceAsync(SnapshotContainer container, string snapshotName)
        {
            // Example: Create a snapshot by importing an unmanaged blob from a different subscription.
            var snapshot = new SnapshotData("West US")
            {
                CreationData = new CreationData(new Compute.Models.DiskCreateOption("Import"))
                {
                    StorageAccountId = "subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Storage/storageAccounts/myStorageAccount",
                    SourceUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                },
            };

            return await container.CreateOrUpdateAsync(snapshotName, snapshot);
        }

        public static async Task<Snapshot> GetExampleInstanceAsync(SnapshotContainer container, string snapshotName)
        {
            // Example: Get information about a snapshot.

            return await container.GetAsync(snapshotName);
        }

        public static async Task<DiskEncryptionSet> CreateOrUpdateExampleInstanceAsync(DiskEncryptionSetContainer container, string diskEncryptionSetName)
        {
            // Example: Create a disk encryption set with key vault from a different subscription.
            var diskEncryptionSet = new DiskEncryptionSetData("West US")
            {
                Identity = new EncryptionSetIdentity()
                {
                    Type = new Compute.Models.DiskEncryptionSetIdentityType("SystemAssigned"),
                },
                EncryptionType = new Compute.Models.DiskEncryptionSetType("EncryptionAtRestWithCustomerKey"),
                ActiveKey = new KeyForDiskEncryptionSet("https://myvaultdifferentsub.vault-int.azure-int.net/keys/{key}"),
            };

            return await container.CreateOrUpdateAsync(diskEncryptionSetName, diskEncryptionSet);
        }

        public static async Task<DiskEncryptionSet> GetExampleInstanceAsync(DiskEncryptionSetContainer container, string diskEncryptionSetName)
        {
            // Example: Get information about a disk encryption set.

            return await container.GetAsync(diskEncryptionSetName);
        }

        public static async Task<DiskAccess> CreateOrUpdateExampleInstanceAsync(DiskAccessContainer container, string diskAccessName)
        {
            // Example: Create a disk access resource.
            var diskAccess = new DiskAccessData("West US");

            return await container.CreateOrUpdateAsync(diskAccessName, diskAccess);
        }

        public static async Task<DiskAccess> GetExampleInstanceAsync(DiskAccessContainer container, string diskAccessName)
        {
            // Example: Get information about a disk access resource with private endpoints.

            return await container.GetAsync(diskAccessName);
        }

        public static async Task<PrivateEndpointConnection> CreateOrUpdateExampleInstanceAsync(PrivateEndpointConnectionContainer container, string privateEndpointConnectionName)
        {
            // Example: Approve a Private Endpoint Connection under a disk access resource.
            var privateEndpointConnection = new PrivateEndpointConnectionData()
            {
                PrivateLinkServiceConnectionState = new PrivateLinkServiceConnectionState()
                {
                    Status = new Compute.Models.PrivateEndpointServiceConnectionStatus("Approved"),
                    Description = "Approving myPrivateEndpointConnection",
                },
            };

            return await container.CreateOrUpdateAsync(privateEndpointConnectionName, privateEndpointConnection);
        }

        public static async Task<PrivateEndpointConnection> GetExampleInstanceAsync(PrivateEndpointConnectionContainer container, string privateEndpointConnectionName)
        {
            // Example: Get information about a private endpoint connection under a disk access resource.

            return await container.GetAsync(privateEndpointConnectionName);
        }

        public static async Task<DiskRestorePoint> GetExampleInstanceAsync(DiskRestorePointContainer container, string diskRestorePointName)
        {
            // Example: Get an incremental disk restorePoint resource.

            return await container.GetAsync(diskRestorePointName);
        }

        public static async Task<Gallery> CreateOrUpdateExampleInstanceAsync(GalleryContainer container, string galleryName)
        {
            // Example: Create or update a simple gallery with sharing profile.
            var gallery = new GalleryData("West US")
            {
                Description = "This is the gallery description.",
                SharingProfile = new SharingProfile()
                {
                    Permissions = new Compute.Models.GallerySharingPermissionTypes("Groups"),
                },
            };

            return await container.CreateOrUpdateAsync(galleryName, gallery);
        }

        public static async Task<Gallery> GetExampleInstanceAsync(GalleryContainer container, string galleryName)
        {
            // Example: Get a gallery with select permissions.
            var select = new Compute.Models.SelectPermissions("Permissions");

            return await container.GetAsync(galleryName, select);
        }

        public static async Task<GalleryImage> CreateOrUpdateExampleInstanceAsync(GalleryImageContainer container, string galleryImageName)
        {
            // Example: Create or update a simple gallery image.
            var galleryImage = new GalleryImageData("West US")
            {
                OsType = "Windows".ToOperatingSystemTypes(),
                OsState = "Generalized".ToOperatingSystemStateTypes(),
                HyperVGeneration = new Compute.Models.HyperVGeneration("V1"),
                Identifier = new GalleryImageIdentifier("myPublisherName", "myOfferName", "mySkuName"),
            };

            return await container.CreateOrUpdateAsync(galleryImageName, galleryImage);
        }

        public static async Task<GalleryImage> GetExampleInstanceAsync(GalleryImageContainer container, string galleryImageName)
        {
            // Example: Get a gallery image.

            return await container.GetAsync(galleryImageName);
        }

        public static async Task<GalleryImageVersion> CreateOrUpdateExampleInstanceAsync(GalleryImageVersionContainer container, string galleryImageVersionName)
        {
            // Example: Create or update a simple Gallery Image Version using VM as source.
            var galleryImageVersion = new GalleryImageVersionData("West US")
            {
                PublishingProfile = new GalleryImageVersionPublishingProfile(),
                StorageProfile = new GalleryImageVersionStorageProfile()
                {
                    Source = new GalleryArtifactVersionSource()
                    {
                        Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/{{resourceGroup}}/providers/Microsoft.Compute/virtualMachines/{{vmName}}"),
                    },
                },
            };

            return await container.CreateOrUpdateAsync(galleryImageVersionName, galleryImageVersion);
        }

        public static async Task<GalleryImageVersion> GetExampleInstanceAsync(GalleryImageVersionContainer container, string galleryImageVersionName)
        {
            // Example: Get a gallery image version with replication status.
            var expand = new Compute.Models.ReplicationStatusTypes("ReplicationStatus");

            return await container.GetAsync(galleryImageVersionName, expand);
        }

        public static async Task<GalleryApplication> CreateOrUpdateExampleInstanceAsync(GalleryApplicationContainer container, string galleryApplicationName)
        {
            // Example: Create or update a simple gallery Application.
            var galleryApplication = new GalleryApplicationData("West US")
            {
                Description = "This is the gallery application description.",
                Eula = "This is the gallery application EULA.",
                PrivacyStatementUri = "myPrivacyStatementUri}",
                ReleaseNoteUri = "myReleaseNoteUri",
                SupportedOSType = "Windows".ToOperatingSystemTypes(),
            };

            return await container.CreateOrUpdateAsync(galleryApplicationName, galleryApplication);
        }

        public static async Task<GalleryApplication> GetExampleInstanceAsync(GalleryApplicationContainer container, string galleryApplicationName)
        {
            // Example: Get a gallery Application.

            return await container.GetAsync(galleryApplicationName);
        }

        public static async Task<GalleryApplicationVersion> CreateOrUpdateExampleInstanceAsync(GalleryApplicationVersionContainer container, string galleryApplicationVersionName)
        {
            // Example: Create or update a simple gallery Application Version.
            var galleryApplicationVersion = new GalleryApplicationVersionData("West US")
            {
                PublishingProfile = new GalleryApplicationVersionPublishingProfile(new UserArtifactSource("https://mystorageaccount.blob.core.windows.net/mycontainer/package.zip?{sasKey}"))
                {
                    ManageActions = new UserArtifactManage("powershell -command \"Expand-Archive -Path package.zip -DestinationPath C:\\package\"", "del C:\\package "),
                    ReplicaCount = 1,
                    EndOfLifeDate = DateTimeOffset.Parse("2019-07-01T07:00:00Z"),
                    StorageAccountType = new Compute.Models.StorageAccountType("Standard_LRS"),
                },
            };

            return await container.CreateOrUpdateAsync(galleryApplicationVersionName, galleryApplicationVersion);
        }

        public static async Task<GalleryApplicationVersion> GetExampleInstanceAsync(GalleryApplicationVersionContainer container, string galleryApplicationVersionName)
        {
            // Example: Get a gallery Application Version with replication status.
            var expand = new Compute.Models.ReplicationStatusTypes("ReplicationStatus");

            return await container.GetAsync(galleryApplicationVersionName, expand);
        }

        public static async Task<SharedGallery> GetExampleInstanceAsync(SharedGalleryContainer container, string galleryUniqueName)
        {
            // Example: Get a gallery.

            return await container.GetAsync(galleryUniqueName);
        }

        public static async Task<SharedGalleryImage> GetExampleInstanceAsync(SharedGalleryImageContainer container, string galleryImageName)
        {
            // Example: Get a gallery.

            return await container.GetAsync(galleryImageName);
        }

        public static async Task<SharedGalleryImageVersion> GetExampleInstanceAsync(SharedGalleryImageVersionContainer container, string galleryImageVersionName)
        {
            // Example: Get a gallery.

            return await container.GetAsync(galleryImageVersionName);
        }

        public static async Task<CloudService> CreateOrUpdateExampleInstanceAsync(CloudServiceContainer container, string cloudServiceName)
        {
            // Example: Create New Cloud Service with Multiple Roles
            var parameters = new CloudServiceData("westus")
            {
                Properties = new CloudServiceProperties()
                {
                    PackageUrl = "{PackageUrl}",
                    Configuration = "{ServiceConfiguration}",
                    UpgradeMode = new Compute.Models.CloudServiceUpgradeMode("Auto"),
                    RoleProfile = new CloudServiceRoleProfile(),
                    NetworkProfile = new CloudServiceNetworkProfile(),
                },
            };

            return await container.CreateOrUpdateAsync(cloudServiceName, parameters);
        }

        public static async Task<CloudService> GetExampleInstanceAsync(CloudServiceContainer container, string cloudServiceName)
        {
            // Example: Get Cloud Service with Multiple Roles and RDP Extension

            return await container.GetAsync(cloudServiceName);
        }

        public static async Task<UpdateDomain> GetUpdateDomainExampleInstanceAsync(UpdateDomainContainer container, string updateDomain)
        {
            // Example: Get Cloud Service Update Domain

            return await container.GetAsync(updateDomain);
        }

        public static async Task<ResourceGroup> CreateResourceGroupAsync(string resourceGroupName, ArmClient client)
        {
            return await client.DefaultSubscription.GetResourceGroups().CreateOrUpdateAsync
            (
            resourceGroupName,
            new ResourceGroupData(client.DefaultSubscription.ToString()) { Tags = { { "test", "env" } } }
            );
        }
    }
}
