// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute;
using Azure.ResourceManager.Compute.Models;
using Azure.ResourceManager.Compute.Tests;
using Azure.ResourceManager.Compute.Tests.Helpers;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using NUnit.Framework;

namespace Azure.ResourceManager.Compute.Tests.Mock
{
    /// <summary> Test for Image. </summary>
    public partial class ImageContainerMockTests : MockTestBase
    {
        public ImageContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<ImageContainer> GetImageContainerAsync(string resourceGroupName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            ImageContainer imageContainer = resourceGroup.GetImages();
            return imageContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: Create a virtual machine image from a blob with DiskEncryptionSet resource.
            var container = await GetImageContainerAsync("myResourceGroup");
            var imageName = "myImage";
            var parameters = new ImageData("West US")
            {
                StorageProfile = new ImageStorageProfile()
                {
                    OsDisk = new ImageOSDisk("Linux".ToOperatingSystemTypes(), "Generalized".ToOperatingSystemStateTypes())
                    {
                        BlobUri = "https://mystorageaccount.blob.core.windows.net/osimages/osimage.vhd",
                        DiskEncryptionSet = new DiskEncryptionSetParameters()
                        {
                            Id = new ResourceIdentifier($"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myResourceGroup/providers/Microsoft.Compute/diskEncryptionSets/{{existing-diskEncryptionSet-name}}"),
                        },
                    },
                },
            };

            await container.CreateOrUpdateAsync(imageName, parameters);
        }
    }
}
