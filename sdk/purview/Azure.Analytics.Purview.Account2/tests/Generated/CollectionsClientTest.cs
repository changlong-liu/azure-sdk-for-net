// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Analytics.Purview.Account;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Core.TestFramework;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Account.Tests.Mock
{
    /// <summary> Test for global::Azure.Analytics.Purview.Account.CollectionsClient. </summary>
    public partial class CollectionsClientMockTests : RecordedTestBase<PurviewAccountTestEnvironment>
    {
        private PurviewAccountClientOptions options;

        public CollectionsClientMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            var httpHandler = new HttpClientHandler();
            httpHandler.ServerCertificateCustomValidationCallback = (_, _, _, _) =>
            {
                return true;
            }
            ;
            options = new PurviewAccountClientOptions { Transport = new HttpClientTransport(httpHandler) };
        }

        [RecordedTest]
        [TestCase]
        public async Task GetCollection()
        {
            // Example: Collections_GetCollection
            Account.CollectionsClient client = new Account.CollectionsClient(new Uri("https://localhost:8443"), "myCollection1", new MockCredential(), options);
            await client.GetCollectionAsync();
        }

        [RecordedTest]
        [TestCase]
        public async Task CreateOrUpdateCollection()
        {
            // Example: Collections_CreateOrUpdateCollection
            Account.CollectionsClient client = new Account.CollectionsClient(new Uri("https://localhost:8443"), "myCollection1", new MockCredential(), options);
            var data = new
            {
                parentCollection = new
                {
                    referenceName = "myParentCollection1",
                }
            ,
            }
            ;
            await client.CreateOrUpdateCollectionAsync(RequestContent.Create(data));
        }

        [RecordedTest]
        [TestCase]
        public async Task DeleteCollection()
        {
            // Example: Collections_DeleteCollection
            Account.CollectionsClient client = new Account.CollectionsClient(new Uri("https://localhost:8443"), "myCollection1", new MockCredential(), options);
            await client.DeleteCollectionAsync();
        }

        [RecordedTest]
        [TestCase]
        public async Task GetCollectionPath()
        {
            // Example: Collections_GetCollectionPath
            Account.CollectionsClient client = new Account.CollectionsClient(new Uri("https://localhost:8443"), "myCollection1", new MockCredential(), options);
            await client.GetCollectionPathAsync();
        }

        [RecordedTest]
        [TestCase]
        public async Task GetChildCollectionNames()
        {
            // Example: Collections_ListChildCollectionNames
            Account.CollectionsClient client = new Account.CollectionsClient(new Uri("https://localhost:8443"), "myCollection1", new MockCredential(), options);
            await foreach (var _ in client.GetChildCollectionNamesAsync())
            {
            }
        }
    }
}
