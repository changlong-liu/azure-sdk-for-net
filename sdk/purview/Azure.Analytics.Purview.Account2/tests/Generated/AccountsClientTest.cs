// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Analytics.Purview.Account;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Core.TestFramework;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Account.Tests.Mock
{
    /// <summary> Test for global::Azure.Analytics.Purview.Account.AccountsClient. </summary>
    public partial class AccountsClientMockTests : RecordedTestBase<PurviewAccountTestEnvironment>
    {
        private PurviewAccountClientOptions options;

        public AccountsClientMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            var httpHandler = new HttpClientHandler();
            httpHandler.ServerCertificateCustomValidationCallback = (_, _, _, _) =>
            {
                return true;
            }
            ;
            options = new PurviewAccountClientOptions { Transport = new HttpClientTransport(httpHandler) };
        }

        [RecordedTest]
        [TestCase]
        public async Task GetAccountProperties()
        {
            // Example: Accounts_GetAccountProperties
            Account.AccountsClient client = new Account.AccountsClient(new Uri("https://localhost:8443"), new MockCredential(), options);
            await client.GetAccountPropertiesAsync();
        }

        [RecordedTest]
        [TestCase]
        public async Task UpdateAccountProperties()
        {
            // Example: Accounts_UpdateAccountProperties
            Account.AccountsClient client = new Account.AccountsClient(new Uri("https://localhost:8443"), new MockCredential(), options);
            var data = new
            {
                friendlyName = "friendly-account1",
            }
            ;
            await client.UpdateAccountPropertiesAsync(RequestContent.Create(data));
        }

        [RecordedTest]
        [TestCase]
        public async Task GetAccessKeys()
        {
            // Example: Accounts_GetAccessKeys
            Account.AccountsClient client = new Account.AccountsClient(new Uri("https://localhost:8443"), new MockCredential(), options);
            await client.GetAccessKeysAsync();
        }

        [RecordedTest]
        [TestCase]
        public async Task RegenerateAccessKey()
        {
            // Example: Accounts_RegenerateKeys
            Account.AccountsClient client = new Account.AccountsClient(new Uri("https://localhost:8443"), new MockCredential(), options);
            var data = new
            {
                keyType = "PrimaryKey",
            }
            ;
            await client.RegenerateAccessKeyAsync(RequestContent.Create(data));
        }

        [RecordedTest]
        [TestCase]
        public async Task GetCollections()
        {
            // Example: Collections_ListCollections
            Account.AccountsClient client = new Account.AccountsClient(new Uri("https://localhost:8443"), new MockCredential(), options);
            await foreach (var _ in client.GetCollectionsAsync())
            {
            }
        }

        [RecordedTest]
        [TestCase]
        public async Task GetResourceSetRules()
        {
            // Example: ResourceSetRules_ListResourceSetRules
            Account.AccountsClient client = new Account.AccountsClient(new Uri("https://localhost:8443"), new MockCredential(), options);
            await foreach (var _ in client.GetResourceSetRulesAsync())
            {
            }
        }
    }
}
