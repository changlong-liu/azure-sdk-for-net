// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Analytics.Purview.Account;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Core.TestFramework;
using NUnit.Framework;

namespace Azure.Analytics.Purview.Account.Tests.Mock
{
    /// <summary> Test for global::Azure.Analytics.Purview.Account.ResourceSetRulesClient. </summary>
    public partial class ResourceSetRulesClientMockTests : RecordedTestBase<PurviewAccountTestEnvironment>
    {
        private PurviewAccountClientOptions options;

        public ResourceSetRulesClientMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            var httpHandler = new HttpClientHandler();
            httpHandler.ServerCertificateCustomValidationCallback = (_, _, _, _) =>
            {
                return true;
            }
            ;
            options = new PurviewAccountClientOptions { Transport = new HttpClientTransport(httpHandler) };
        }

        [RecordedTest]
        [TestCase]
        public async Task GetResourceSetRule()
        {
            // Example: ResourceSetRules_GetResourceSetRule
            Account.ResourceSetRulesClient client = new Account.ResourceSetRulesClient(new Uri("https://localhost:8443"), new MockCredential(), options);
            await client.GetResourceSetRuleAsync();
        }

        [RecordedTest]
        [TestCase]
        public async Task CreateOrUpdateResourceSetRule()
        {
            // Example: ResourceSetRules_CreateOrUpdateResourceSetRule
            Account.ResourceSetRulesClient client = new Account.ResourceSetRulesClient(new Uri("https://localhost:8443"), new MockCredential(), options);
            var data = new
            {
                advancedResourceSet = new
                {
                    resourceSetProcessing = "Default",
                }
            ,
                pathPatternConfig = new
                {
                    acceptedPatterns = new object[0]
            {
            }
            ,
                    complexReplacers = new object[1]
            {
new
{
name = "SparkPath",
createdBy = "AzureDataCatalog",
disabled = "false",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
typeName = "Microsoft.DataMap.PathPattern.SparkPathReplacer",
}
,
            }
            ,
                    createdBy = "AzureDataCatalog",
                    enableDefaultPatterns = "true",
                    lastUpdatedTimestamp = "0",
                    modifiedBy = "AzureDataCatalog",
                    regexReplacers = new object[11]
            {
new
{
name = "Guid",
createdBy = "AzureDataCatalog",
disabled = "false",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minHex = "32",
options = "9",
regexStr = "([0-9A-F]{32}|[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12})",
}
,
replaceWith = "{GUID}",
}
,
new
{
name = "Number",
createdBy = "AzureDataCatalog",
disabled = "false",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minDigits = "1",
options = "8",
regexStr = "^\\d+$",
}
,
replaceWith = "{N}",
}
,
new
{
name = "yyyy-mm-ddThh-MM-ss",
createdBy = "AzureDataCatalog",
disabled = "false",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minDigits = "12",
options = "8",
regexStr = "(20)[1-9][0-9]([-\\._@]?)(0[1-9]|1[012])([-\\._@]?)(0[1-9]|[12][0-9]|3[01])([T])(2[0-3]|[01]?[0-9])([-\\._@]?)([0-5][0-9])([-\\._@]?)([0-5][0-9])(Z)?",
}
,
replaceWith = "{N}$2{N}$4{N}$6{N}$8{N}$10{N}$12",
}
,
new
{
name = "yyyy-mm-ddThh",
condition = "ApplyToNonFileName",
createdBy = "AzureDataCatalog",
disabled = "false",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minDigits = "8",
options = "8",
regexStr = "(20)[1-9][0-9]([-\\._@]?)(0[1-9]|1[012])([-\\._@]?)(0[1-9]|[12][0-9]|3[01])([T])(2[0-3]|[01]?[0-9])(Z)?",
}
,
replaceWith = "{N}$2{N}$4{N}$6{N}$8",
}
,
new
{
name = "yyyy-mm-ddZ",
createdBy = "AzureDataCatalog",
disabled = "false",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minDigits = "6",
options = "8",
regexStr = "(20)[1-9][0-9]([-\\._@]?)(0[1-9]|1[012])([-\\._@]?)(0[1-9]|[12][0-9]|3[01])(Z)",
}
,
replaceWith = "{N}$2{N}$4{N}$6",
}
,
new
{
name = "yyyy-mm-dd-hhZ",
createdBy = "AzureDataCatalog",
disabled = "false",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minDigits = "8",
options = "8",
regexStr = "(20)[1-9][0-9]([-\\._@]?)(0[1-9]|1[012])([-\\._@]?)(0[1-9]|[12][0-9]|3[01])([-\\._@]?)(2[0-3]|[01]?[0-9])(Z)",
}
,
replaceWith = "{N}$2{N}$4{N}$6{N}$8",
}
,
new
{
name = "NumberBetweenDelimiter",
condition = "ApplyToFileNameOrNonVersionString",
createdBy = "AzureDataCatalog",
disabled = "false",
doNotReplaceRegex = new
{
minDigits = "1",
minLetters = "1",
options = "9",
regexStr = "(?<=[-\\._@]|^)[v](\\d+)[\\.](\\d+)[\\.]?(\\d+)?(?=[-\\._@]|$)",
}
,
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minDigits = "1",
options = "8",
regexStr = "(?<=[-\\._@])([\\d]+)(?=[-\\._@])|^(\\d+)(?=[-\\._@])|(?<=[-\\._@])(\\d+)$",
}
,
replaceWith = "{N}",
}
,
new
{
name = "4ByteHex",
createdBy = "AzureDataCatalog",
disabled = "false",
doNotReplaceRegex = new
{
minDigits = "1",
minLetters = "1",
options = "9",
regexStr = "(?<=[-\\._@]|^)[v](\\d+)[\\.](\\d+)[\\.]?(\\d+)?(?=[-\\._@]|$)",
}
,
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minDigitsOrLetters = "8",
options = "9",
regexStr = "(?<=[-\\._@]|^)([0-9A-F]{8,16})(?=[-\\._@]|$)",
}
,
replaceWith = "{HEX}",
}
,
new
{
name = "NumberInFile",
condition = "ApplyToFileName",
createdBy = "AzureDataCatalog",
disabled = "false",
doNotReplaceRegex = new
{
minDigits = "1",
minLetters = "1",
options = "9",
regexStr = "(?<=[-\\._@]|^)[v](\\d+)[\\.](\\d+)[\\.]?(\\d+)?(?=[-\\._@]|$)",
}
,
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minDigits = "1",
options = "8",
regexStr = "(\\d+)",
}
,
replaceWith = "{N}",
}
,
new
{
name = "Localization(DashSeparated)",
createdBy = "AzureDataCatalog",
disabled = "false",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minDashes = "1",
minLetters = "4",
options = "9",
regexStr = "(?<=[-\\._@]|^)(ar-eg|ar-sa|cy-gb|da-dk|de-at|de-ch|de-de|en-au|en-ca|en-gb|en-ie|en-in|en-my|en-nz|en-ph|en-sg|en-us|en-ww|en-xa|en-za|es-ar|es-cl|es-es|es-mx|es-us|es-xl|fi-fi|fr-be|fr-ca|fr-ch|fr-fr|gu-in|hi-in|id-id|it-it|ja-jp|nb-no|nl-nl|nl-be|pt-br|pt-pt|pl-pl|ru-ru|sv-se|ta-in|te-in|zh-cn|zh-hk|zh-tw|ko-kr|tr-tr)(?=[-\\._@]|$)",
}
,
replaceWith = "{LOC}",
}
,
new
{
name = "Localization(UnderscoreSeparated)",
createdBy = "AzureDataCatalog",
disabled = "false",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
regex = new
{
minLetters = "4",
minUnderscores = "1",
options = "9",
regexStr = "(?<=[-\\._@]|^)(ar_eg|ar_sa|cy_gb|da_dk|de_at|de_ch|de_de|en_au|en_ca|en_gb|en_ie|en_in|en_my|en_nz|en_ph|en_sg|en_us|en_ww|en_xa|en_za|es_ar|es_cl|es_es|es_mx|es_us|es_xl|fi_fi|fr_be|fr_ca|fr_ch|fr_fr|gu_in|hi_in|id_id|it_it|ja_jp|nb_no|nl_nl|nl_be|pt_br|pt_pt|pl_pl|ru_ru|sv_se|ta_in|te_in|zh_cn|zh_hk|zh_tw|ko_kr|tr_tr)(?=[-\\._@]|$)",
}
,
replaceWith = "{LOC}",
}
,
            }
            ,
                    rejectedPatterns = new object[1]
            {
new
{
name = "OfficeDocuments",
path = "^.*\\.(?i)(DOC|DOCM|DOCX|DOT|ODP|ODS|ODT|PDF|POT|PPS|PPSX|PPT|PPTM|PPTX|XLC|XLS|XLSB|XLSM|XLSX|XLT)(?-i)$",
createdBy = "AzureDataCatalog",
filterType = "Regex",
lastUpdatedTimestamp = "0",
modifiedBy = "AzureDataCatalog",
}
,
            }
            ,
                }
            ,
            }
            ;
            await client.CreateOrUpdateResourceSetRuleAsync(RequestContent.Create(data));
        }

        [RecordedTest]
        [TestCase]
        public async Task DeleteResourceSetRule()
        {
            // Example: ResourceSetRules_DeleteResourceSetRule
            Account.ResourceSetRulesClient client = new Account.ResourceSetRulesClient(new Uri("https://localhost:8443"), new MockCredential(), options);
            await client.DeleteResourceSetRuleAsync();
        }
    }
}
